{"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8076321,"sourceType":"datasetVersion","datasetId":4766255}],"dockerImageVersionId":30698,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"Base on the data from \nhttps://www.kaggle.com/datasets/anandshaw2001/customer-churn-dataset/data provided by anandshaw2001, licenced CC0.\n\n","metadata":{}},{"cell_type":"code","source":"#librairies imporation\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn import preprocessing\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import classification_report, confusion_matrix\nfrom sklearn.model_selection import train_test_split\n","metadata":{"execution":{"iopub.status.busy":"2024-04-26T12:15:02.695210Z","iopub.execute_input":"2024-04-26T12:15:02.695641Z","iopub.status.idle":"2024-04-26T12:15:04.200730Z","shell.execute_reply.started":"2024-04-26T12:15:02.695606Z","shell.execute_reply":"2024-04-26T12:15:04.199580Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"markdown","source":"The objective of this EDA is to show which factor in the data explain a exit from a customer.\nThen to predict which customer is most likely to quit and what are the main caracteristic for this customer.","metadata":{}},{"cell_type":"markdown","source":"# Data Exploration","metadata":{}},{"cell_type":"code","source":"#Opening csv file:\nfile = pd.read_csv(\"/kaggle/input/customer-churn-dataset/Churn_Modelling.csv\")\ndata = file.copy()\ndata.head()\n","metadata":{"execution":{"iopub.status.busy":"2024-04-26T12:15:04.202940Z","iopub.execute_input":"2024-04-26T12:15:04.203814Z","iopub.status.idle":"2024-04-26T12:15:04.282828Z","shell.execute_reply.started":"2024-04-26T12:15:04.203772Z","shell.execute_reply":"2024-04-26T12:15:04.281736Z"},"trusted":true},"execution_count":3,"outputs":[{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"   RowNumber  CustomerId   Surname  CreditScore Geography  Gender  Age  \\\n0          1    15634602  Hargrave          619    France  Female   42   \n1          2    15647311      Hill          608     Spain  Female   41   \n2          3    15619304      Onio          502    France  Female   42   \n3          4    15701354      Boni          699    France  Female   39   \n4          5    15737888  Mitchell          850     Spain  Female   43   \n\n   Tenure    Balance  NumOfProducts  HasCrCard  IsActiveMember  \\\n0       2       0.00              1          1               1   \n1       1   83807.86              1          0               1   \n2       8  159660.80              3          1               0   \n3       1       0.00              2          0               0   \n4       2  125510.82              1          1               1   \n\n   EstimatedSalary  Exited  \n0        101348.88       1  \n1        112542.58       0  \n2        113931.57       1  \n3         93826.63       0  \n4         79084.10       0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>RowNumber</th>\n      <th>CustomerId</th>\n      <th>Surname</th>\n      <th>CreditScore</th>\n      <th>Geography</th>\n      <th>Gender</th>\n      <th>Age</th>\n      <th>Tenure</th>\n      <th>Balance</th>\n      <th>NumOfProducts</th>\n      <th>HasCrCard</th>\n      <th>IsActiveMember</th>\n      <th>EstimatedSalary</th>\n      <th>Exited</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>15634602</td>\n      <td>Hargrave</td>\n      <td>619</td>\n      <td>France</td>\n      <td>Female</td>\n      <td>42</td>\n      <td>2</td>\n      <td>0.00</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>101348.88</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>15647311</td>\n      <td>Hill</td>\n      <td>608</td>\n      <td>Spain</td>\n      <td>Female</td>\n      <td>41</td>\n      <td>1</td>\n      <td>83807.86</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>112542.58</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>15619304</td>\n      <td>Onio</td>\n      <td>502</td>\n      <td>France</td>\n      <td>Female</td>\n      <td>42</td>\n      <td>8</td>\n      <td>159660.80</td>\n      <td>3</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113931.57</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>15701354</td>\n      <td>Boni</td>\n      <td>699</td>\n      <td>France</td>\n      <td>Female</td>\n      <td>39</td>\n      <td>1</td>\n      <td>0.00</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>93826.63</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>15737888</td>\n      <td>Mitchell</td>\n      <td>850</td>\n      <td>Spain</td>\n      <td>Female</td>\n      <td>43</td>\n      <td>2</td>\n      <td>125510.82</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>79084.10</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"RowNumber : A unique identifier for each row in the dataset.\n\nCustomerId : Unique customer identification number.\n\nSurname : The last name of the customer (for privacy reasons, consider anonymizing this data if not already done).\n\nCreditScore : The customer's credit score at the time of data collection.\n\nGeography : The customer's country or region, providing insights into location-based trends in churn.\n\nGender : The customer's gender.\n\nAge : The customer's age, valuable for demographic analysis.\n\nTenure : The number of years the customer has been with the bank.\n\nBalance : The customer's account balance.\n\nNumOfProducts : The number of products the customer has purchased or subscribed to.\n\nHasCrCard : Indicates whether the customer has a credit card (1) or not (0).\n\nIsActiveMember : Indicates whether the customer is an active member (1) or not (0).\n\nEstimatedSalary : The customer's estimated salary.\n\nExited : The target variable, indicating whether the customer has churned (1) or not (0).","metadata":{}},{"cell_type":"code","source":"total_customers = data.shape[0]\nleft_customers_proportion = data['Exited'].mean()  # Assuming 'Exited' is coded as True for customers who left and False for those who stayed\n\npercentage_left = left_customers_proportion * 100\nprint(f\"{percentage_left:.2f}% of customers left the bank.\")\n","metadata":{"execution":{"iopub.status.busy":"2024-04-26T12:15:04.284426Z","iopub.execute_input":"2024-04-26T12:15:04.285123Z","iopub.status.idle":"2024-04-26T12:15:04.293697Z","shell.execute_reply.started":"2024-04-26T12:15:04.285085Z","shell.execute_reply":"2024-04-26T12:15:04.292248Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"20.37% of customers left the bank.\n","output_type":"stream"}]},{"cell_type":"code","source":"#Quick dive into some metrics\nmean_credit_score_countries = data.groupby(\"Geography\")[\"Exited\"].mean()\nmean_credit_score_gender = data.groupby(\"Gender\")[\"Exited\"].mean()\n\n#Creation of group by age\n# Define age group boundaries\nage_group_boundaries = [18, 25, 40, 55, 70, 100]\nage_group_labels = ['18-25', '26-40', '41-55', '56-70', '70+']\n\n# Create age groups using pd.cut()\ndata['AgeGroup'] = pd.cut(data['Age'], bins=age_group_boundaries, labels=age_group_labels, right=False)\ndata['AgeGroup']\nmean_credit_score_agegroup = data.groupby(\"AgeGroup\", observed=False)[\"Exited\"].mean()\n\nprint(\"Mean exited by country :\", mean_credit_score_countries, \n      \"Mean exited by gender :\",mean_credit_score_gender,\n      \"Mean exited group of ages :\", mean_credit_score_agegroup,\n      sep = \"\\n\\n\")","metadata":{"execution":{"iopub.status.busy":"2024-04-26T12:15:04.297450Z","iopub.execute_input":"2024-04-26T12:15:04.297942Z","iopub.status.idle":"2024-04-26T12:15:04.328532Z","shell.execute_reply.started":"2024-04-26T12:15:04.297902Z","shell.execute_reply":"2024-04-26T12:15:04.327320Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stdout","text":"Mean exited by country :\n\nGeography\nFrance     0.161548\nGermany    0.324432\nSpain      0.166734\nName: Exited, dtype: float64\n\nMean exited by gender :\n\nGender\nFemale    0.250715\nMale      0.164559\nName: Exited, dtype: float64\n\nMean exited group of ages :\n\nAgeGroup\n18-25    0.087527\n26-40    0.100723\n41-55    0.350687\n56-70    0.447332\n70+      0.099338\nName: Exited, dtype: float64\n","output_type":"stream"}]},{"cell_type":"code","source":"fig, ax = plt.subplots()\nax.bar(mean_credit_score_countries.index, mean_credit_score_countries.values)\nax.set_xlabel('Country')\nax.set_ylabel('Mean Exited')\nax.set_title('Mean Exited by Country')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-04-26T12:15:04.329987Z","iopub.execute_input":"2024-04-26T12:15:04.330281Z","iopub.status.idle":"2024-04-26T12:15:04.577263Z","shell.execute_reply.started":"2024-04-26T12:15:04.330257Z","shell.execute_reply":"2024-04-26T12:15:04.576103Z"},"trusted":true},"execution_count":6,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"fig, ax = plt.subplots()\nax.bar(mean_credit_score_gender.index, mean_credit_score_gender.values)\nax.set_xlabel('Gender')\nax.set_ylabel('Mean Exited')\nax.set_title('Mean Exited by Gender')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-04-26T12:15:04.578631Z","iopub.execute_input":"2024-04-26T12:15:04.579596Z","iopub.status.idle":"2024-04-26T12:15:04.791918Z","shell.execute_reply.started":"2024-04-26T12:15:04.579563Z","shell.execute_reply":"2024-04-26T12:15:04.790743Z"},"trusted":true},"execution_count":7,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"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6aef5nn5a+PGjfLy8lLHjh1tzrQ0btxYHh4e2rFjh7VvqVKlrD/fuHFDycnJat26tdLT03XixAmbcT08PGzOPLi4uKhZs2b68ccf83UMwcHB2rZtW45lwIABNv0WLVokLy8v9enTR5MnT9bzzz+f6yWj/Lh27Zq+/PJL9e3b13p8ycnJunr1qkJDQ3Xq1CldvHhRkvTZZ5/pySefVLNmzazbV6xY0e7LMCNGjLD+bLFYNGLECGVmZmr79u2SpFq1aik4OFhr1qyxqXPr1q0aOHCgLBZLnmOnpqZKUo7b7T/77DNVrFjRugQGBlrX2fP7IEm1a9dW69atbd6DRx991Obfc37fq23btun69esaMGCAzb6dnZ0VHBycY9+SNGzYsDyPH3jQmAQNOFjFihUVEhKitWvXKj09XVlZWerTp0+ufU+dOqWUlBRVqlQp1/VJSUnWn48dO6ZJkybpyy+/tP5xvSslJcXm9SOPPJLjj3O5cuX07bff5usYvL29FRIS8rv9ypcvr4ULF+qZZ56Rj4+PFi5cmK/xc3P69GkZhqHJkydr8uTJufZJSkpS5cqV9dNPPyk4ODjH+kcffTTf+3NyclK1atVs2mrVqiVJNpd7Bg0apBEjRuinn35SYGCgNm7cqF9++UXPP//8PccvU6aMJCktLc2mvWXLltY5YnPmzNHu3but6+z5fZCkKlWq5OhTrlw5m/lC+X2vTp06JUlq3759rvv29PS0eV2iRAk98sgjufYFHIEABBQBzz77rIYMGaKEhAR17txZZcuWzbVfdna2KlWqZHOG4bfuThi+fv262rRpI09PT/31r39V9erV5ebmpoMHD+rVV1/NMaHV2dk51/GM30xYLiiff/65pF/nHV24cCHPY/09d49h7NixCg0NzbVPjRo17mvsP6J///4aPXq01qxZo9dee00ffvihmjRp8rth67HHHpMkHT16VPXr17e23w3IkvThhx/abJPf34e7CvLf8933f/Xq1fL19c2x/rd3NUqSq6urnJy46ICigwAEFAG9evXS0KFDtWfPHm3YsCHPftWrV9f27dvVsmVLm0tc/ys2NlZXr17Vpk2b9NRTT1nbz549W6B12ys6Olrvvvuuxo8frzVr1ig8PFx79+7N8cfyt/K6bHT3bEzJkiV/9+xTYGCg9YzFb508eTLftWdnZ+vHH3+0nvWRpB9++EGSbJ5cXb58eXXt2lVr1qzRwIEDtXv3bs2fP/93x+/cubOcnZ2t2+VHfn8f7JHf96p69eqSfp3gnp+zf0BRQxwHigAPDw8tWbJEU6dOVffu3fPs17dvX2VlZWn69Ok51t25c0fXr1+X9N//0//t/9lnZmbmebfVg3D9+nW99NJLatasmWbMmKF3331XBw8e1IwZM+65XenSpa3b/1alSpXUtm1bvfPOO7p8+XKO7a5cuWL9uUuXLtqzZ4/27dtnsz6vMyd5WbRokfVnwzC0aNEilSxZUh06dLDp9/zzz+v48eMaN26cnJ2d87yj77eqVKmiF154QVu3brXZz2/975ma/P4+2CO/71VoaKg8PT01Y8aMHHeb3d0GKMo4AwQUEeHh4b/bp02bNho6dKhmzpypw4cPq1OnTipZsqROnTqljRs3asGCBerTp49atGihcuXKKTw8XH/5y19ksVi0evXqQrmkJUkXL17McXlG+jXY9ezZU5I0cuRIXb16Vdu3b5ezs7PCwsL00ksv6Y033lCPHj1sLvv8VqlSpVS7dm1t2LBBtWrVUvny5VWnTh3VqVNHixcvVqtWrVS3bl0NGTJE1apVU2JiouLi4nThwgUdOXJEkjR+/HitXr3a+owdd3d3LVu2TIGBgfme5+Tm5qbo6GiFh4crODhYW7du1ZYtW/Taa6/luNTUtWtXVahQQRs3blTnzp3znKPzv+bPn6+zZ8/qlVde0fr169W9e3dVqlRJycnJ2r17t/7973/bXErL7++DPfL7Xnl6emrJkiV6/vnn1ahRI/Xv318VK1ZUfHy8tmzZopYtW+YZ5IAiwYF3oAGm9dvb4O/lf2+Dv2vZsmVG48aNjVKlShllypQx6tata4wfP964dOmStc/u3buNJ5980ihVqpTh7+9vjB8/3vj8888NScaOHTus/dq0aWM88cQTOfbxv7ej36tG5XEb/N3tP/nkE0OSMW/ePJttU1NTjcDAQKN+/fpGZmZmnvv95ptvjMaNGxsuLi45bok/c+aMMWjQIMPX19coWbKkUblyZaNbt27Gxx9/bDPGt99+a7Rp08Zwc3MzKleubEyfPt1477338n0bvLu7u3HmzBmjU6dORunSpQ0fHx8jKirKyMrKynWb4cOHG5KMtWvX/u57+Ft37twxVq5cabRv394oX768UaJECcPb29vo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tm3bdPz4cT3xxBMaPny4goKClJaWVlg1AgAAFKj7+jZ4SXJycpLFYpFhGMrKyirImgAAAAqVXQEoIyND69atU8eOHVWrVi199913WrRokeLj43kOEAAAKDbyHYCGDx8uPz8/zZo1S926ddP58+e1ceNGdenSRU5O930iSYsXL1ZQUJDc3NwUHBysffv25dn32LFjevrppxUUFCSLxaL58+f/4TEBAID55PsusKVLl6pKlSqqVq2adu7cqZ07d+bab9OmTfne+YYNGxQZGamlS5cqODhY8+fPV2hoqE6ePKlKlSrl6J+enq5q1arpmWee0ejRowtkTAAAYD75PnUzaNAgtWvXTmXLlpWXl1eeiz3eeustDRkyRBEREapdu7aWLl2q0qVL5/kwxaZNm2rOnDnq37+/XF1dC2RMAABgPnY9CLEgZWZm6sCBA5o4caK1zcnJSSEhIYqLi3ugY2ZkZCgjI8P6OjU19b72DwAAiof7n7zzByUnJysrK0s+Pj427T4+PkpISHigY86cOdPmLFZAQMB97R8AABQPDgtARcnEiROVkpJiXc6fP+/okgAAQCG672+D/6O8vb3l7OysxMREm/bExET5+vo+0DFdXV3znFMEAAAePg47A+Ti4qLGjRsrJibG2padna2YmBg1b968yIwJAAAePg47AyRJkZGRCg8PV5MmTdSsWTPNnz9fN2/eVEREhKRf7zyrXLmyZs6cKenXSc7Hjx+3/nzx4kUdPnxYHh4eqlGjRr7GBAAAcGgA6tevn65cuaIpU6YoISFBDRo0UHR0tHUSc3x8vM1DFi9duqSGDRtaX8+dO1dz585VmzZtFBsbm68xAQAALAZf5Z5DamqqvLy8lJKSIk9PzwIfP2jClgIfE3hYnJvV1dElFAg+50DeCutzbs/fb+4CAwAApkMAAgAApkMAAgAApkMAAgAApkMAAgAApkMAAgAApkMAAgAApkMAAgAApkMAAgAApkMAAgAApkMAAgAApkMAAgAApkMAAgAApkMAAgAApkMAAgAApkMAAgAApkMAAgAApkMAAgAApkMAAgAApkMAAgAApkMAAgAApkMAAgAApkMAAgAApkMAAgAApkMAAgAApkMAAgAApkMAAgAApkMAAgAApkMAAgAApkMAAgAApkMAAgAApkMAAgAApkMAAgAApkMAAgAApkMAAgAApkMA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XTdv3lRkZKT279+vmJgYOTk5qVevXsrOzs51zOvXr6t9+/Zq2LCh9u/fr+joaCUmJqpv376FeixwIAMo4sLDww1nZ2fD3d3duvTp08fo0KGDMWPGDJu+q1evNvz8/KyvJRmTJk2yvo6LizMkGe+99561bd26dYabm9s9a3jiiSeMt99+2/o6MDDQ+Nvf/mYYhmF8/fXXhqenp3H79m2bbapXr2688847dh8vgNyFh4cbPXr0MJKSkgxXV1fj3Llzxrlz5ww3NzfjypUrRo8ePYzw8PBct71y5Yohyfjuu+8MwzCMs2fPGpKMQ4cOGYZhGNOnTzc6depks8358+cNScbJkycL87DgIA7/LjAgP9q1a6clS5ZYX7u7u6tevXravXu3zRmfrKws3b59W+np6SpdurQkqV69etb1d79jrm7dujZtt2/fVmpqqjw9PZWWlqapU6dqy5Ytunz5su7cuaNbt27leQboyJEjSktLU4UKFWzab9269bun3AHYr2LFiuratatWrVolwzDUtWtXeXt72/Q5deqUpkyZor179yo5Odl65ic+Pt7muyPvOnLkiHbs2CEPD48c686cOaNatWoVzsHAYQhAKBbc3d1Vo0YNm7a0tDRNmzZNvXv3ztH/t198W7JkSevPFoslz7a7/4EcO3astm3bprlz56pGjRoqVaqU+vTpo8zMzFxrS0tLk5+fn2JjY3OsK1u2bP4OEIBdXnjhBeul68WLF+dY3717dwUGBmr58uXy9/dXdna26tSpc8/Pcffu3TV79uwc6/z8/Aq2eBQJBCAUW40aNdLJkydzBKM/avfu3Ro8eLB69eol6df/MJ47d+6edSQkJKhEiRIKCgoq0FoA5C4sLEyZmZmyWCwKDQ21WXf16lWdPHlSy5cvV+vWrSVJu3btuud4jRo10j/+8Q8FBQWpRAn+NJoBk6BRbE2ZMkUffPCBpk2bpmPHjun777/X+vXrNWnSpD80bs2aNbVp0yYdPnxYR44c0bPPPpvnxElJCgkJUfPmzdWzZ0998cUXOnfunL755hu9/vrr2r9//x+qBUDunJ2d9f333+v48eNydna2WVeuXDlVqFBBy5Yt0+nTp/Xll18qMjLynuO9/PLLunbtmgYMGKD//Oc/OnPmjD7//HNFREQoKyurMA8FDkIAQrEVGhqqTz/9VF988YWaNm2qJ598Un/7298UGBj4h8Z96623VK5cObVo0ULdu3dXaGioGjVqlGd/i8Wizz77TE899ZQiIiJUq1Yt9e/fXz/99JN1zhGAgufp6SlPT88c7U5OTlq/fr0OHDigOnXqaPTo0ZozZ849x/L399fu3buVlZWlTp06qW7duho1apTKli0rJyf+VD6MLIZhGI4uAgAA4EEi1gIAANMhAAEAANMhAAEAANMhAAEAANMhAAEAANMhAAEAANMhAAEAANMhAAHA/2jbtq1GjRrl6DIAFCICEIAiKSEhQSNHjlSNGjXk5uYmHx8ftWzZUkuWLFF6erqjywNQzPGNbwCKnB9//FEtW7ZU2bJlNWPGDNWtW1eurq767rvvtGzZMlWuXFl/+tOfHF1mnrKysmSxWPgKBaAI49MJoMgZPny4SpQoof3796tv3756/PHHVa1aNfXo0UNbtmxR9+7dJUnXr1/XSy+9pIoVK8rT01Pt27fXkSNHrONMnTpVDRo00OrVqxUUFCQvLy/1799fN27csPa5efOmBg0aJA8PD/n5+WnevHk56snIyNDYsWNVuXJlubu7Kzg4WLGxsdb1q1atUtmyZfWvf/1LtWvXlqurq+Lj4wvvDQLwhxGAABQpV69e1RdffKGXX35Z7u7uufaxWCySpGeeeUZJSUnaunWrDhw4oEaNGqlDhw66du2ate+ZM2e0efNmffrpp/r000+1c+dOzZo1y7p+3Lhx2rlzpz755BN98cUXio2N1cGDB232N2LECMXFxWn9+vX69ttv9cwzzygsLEynTp2y9klPT9fs2bP17rvv6tixY6pUqVJBvi0ACpoBAEXInj17DEnGpk2bbNorVKhguLu7G+7u7sb48eONr7/+2vD09DRu375t06969erGO++8YxiGYURFRRmlS5c2UlNTrevHjRtnBAcHG4ZhGDdu3DBcXFyMjz76yLr+6tWrRqlSpYyRI0cahmEYP/30k+Hs7GxcvHjRZj8dOnQwJk6caBiGYaxcudKQZBw+fLhg3gQAhY45QACKhX379ik7O1sDBw5URkaGjhw5orS0NFWoUMGm361bt3TmzBnr66CgIJUpU8b62s/PT0lJSZJ+PTuUmZmp4OBg6/ry5cvr0Ucftb7+7rvvlJWVpVq1atnsJyMjw2bfLi4uqlevXsEcLIBCRwACUKTUqFFDFotFJ0+etGmvVq2aJKlUqVKSpLS0NPn5+dnMxbmrbNmy1p9Llixps85isSg7Ozvf9aSlpcnZ2VkHDhyQs7OzzToPDw/rz6VKlbJemgNQ9BGAABQpFSpUUMeOHbVo0SK98sorec4DatSokRISElSiRAkFBQXd176qV6+ukiVLau/evapSpYok6eeff9YPP/ygNm3aSJIaNmyorKwsJSUlqXXr1ve1HwBFD5OgARQ5f//733Xnzh01adJEGzZs0Pfff6+TJ0/qww8/1IkTJ+Ts7KyQkBA1b95cPXv21BdffKFz587pm2++0euvv679+/fnaz8eHh568cUXNW7cOH355Zc6evSoBg8ebHP7eq1atTRw4EANGjRImzZt0tmzZ7Vv3z7NnDlTW7ZsKay3AEAh4wwQgCKnevXqOnTokGbMmKGJEyfqwoULcnV1Ve3atTV27FgNHz5cFotFn332mV5//XVFREToypUr8vX11VNPPSUfH59872vOnDlKS0tT9+7dVaZMGY0ZM0YpKSk2fVauXKk33nhDY8aM0cWLF+Xt7a0nn3xS3bp1K+hDB/CAWAzDMBxdBAAAwIPEJTAAAGA6BCAAAGA6BCAAAGA6BCAAAGA6BCAAAGA6BCAAAGA6BCAAAGA6BCAAAGA6BCAAAGA6BCAAAGA6BCAAAGA6BCAAAGA6/x/7qQktf1khswAAAABJRU5ErkJggg=="},"metadata":{}}]},{"cell_type":"code","source":"fig, ax = plt.subplots()\nax.bar(mean_credit_score_agegroup.index, mean_credit_score_agegroup.values)\nax.set_xlabel('Age Group')\nax.set_ylabel('Mean Exited')\nax.set_title('Mean Exited by Age Group')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-04-26T12:15:04.793330Z","iopub.execute_input":"2024-04-26T12:15:04.794846Z","iopub.status.idle":"2024-04-26T12:15:05.019833Z","shell.execute_reply.started":"2024-04-26T12:15:04.794806Z","shell.execute_reply":"2024-04-26T12:15:05.018681Z"},"trusted":true},"execution_count":8,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"The age of the personne have a huge impact, and the country, maybe gender could have an impact.","metadata":{}},{"cell_type":"code","source":"data.info()","metadata":{"execution":{"iopub.status.busy":"2024-04-26T12:15:05.021154Z","iopub.execute_input":"2024-04-26T12:15:05.021497Z","iopub.status.idle":"2024-04-26T12:15:05.042259Z","shell.execute_reply.started":"2024-04-26T12:15:05.021468Z","shell.execute_reply":"2024-04-26T12:15:05.041125Z"},"trusted":true},"execution_count":9,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 10000 entries, 0 to 9999\nData columns (total 15 columns):\n #   Column           Non-Null Count  Dtype   \n---  ------           --------------  -----   \n 0   RowNumber        10000 non-null  int64   \n 1   CustomerId       10000 non-null  int64   \n 2   Surname          10000 non-null  object  \n 3   CreditScore      10000 non-null  int64   \n 4   Geography        10000 non-null  object  \n 5   Gender           10000 non-null  object  \n 6   Age              10000 non-null  int64   \n 7   Tenure           10000 non-null  int64   \n 8   Balance          10000 non-null  float64 \n 9   NumOfProducts    10000 non-null  int64   \n 10  HasCrCard        10000 non-null  int64   \n 11  IsActiveMember   10000 non-null  int64   \n 12  EstimatedSalary  10000 non-null  float64 \n 13  Exited           10000 non-null  int64   \n 14  AgeGroup         10000 non-null  category\ndtypes: category(1), float64(2), int64(9), object(3)\nmemory usage: 1.1+ MB\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Data Clustering and Modelling","metadata":{}},{"cell_type":"code","source":"from sklearn.preprocessing import LabelEncoder\n\n# Initialize a LabelEncoder\nle = LabelEncoder()\n\n# Perform Label Encoding on the 'Geography' column\ndata['Geography_Id'] = le.fit_transform(data['Geography'])\ndata['GenderId'] = le.fit_transform(data['Gender'])\none_hot_encoded = data['AgeGroup'].str.get_dummies()\ndata = pd.concat([data, one_hot_encoded], axis=1)\ndata.head()\n","metadata":{"execution":{"iopub.status.busy":"2024-04-26T12:15:05.043611Z","iopub.execute_input":"2024-04-26T12:15:05.046802Z","iopub.status.idle":"2024-04-26T12:15:05.118019Z","shell.execute_reply.started":"2024-04-26T12:15:05.046770Z","shell.execute_reply":"2024-04-26T12:15:05.116896Z"},"trusted":true},"execution_count":10,"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"   RowNumber  CustomerId   Surname  CreditScore Geography  Gender  Age  \\\n0          1    15634602  Hargrave          619    France  Female   42   \n1          2    15647311      Hill          608     Spain  Female   41   \n2          3    15619304      Onio          502    France  Female   42   \n3          4    15701354      Boni          699    France  Female   39   \n4          5    15737888  Mitchell          850     Spain  Female   43   \n\n   Tenure    Balance  NumOfProducts  ...  EstimatedSalary  Exited  AgeGroup  \\\n0       2       0.00              1  ...        101348.88       1     41-55   \n1       1   83807.86              1  ...        112542.58       0     41-55   \n2       8  159660.80              3  ...        113931.57       1     41-55   \n3       1       0.00              2  ...         93826.63       0     26-40   \n4       2  125510.82              1  ...         79084.10       0     41-55   \n\n   Geography_Id GenderId  18-25  26-40  41-55  56-70  70+  \n0             0        0      0      0      1      0    0  \n1             2        0      0      0      1      0    0  \n2             0        0      0      0      1      0    0  \n3             0        0      0      1      0      0    0  \n4             2        0      0      0      1      0    0  \n\n[5 rows x 22 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>RowNumber</th>\n      <th>CustomerId</th>\n      <th>Surname</th>\n      <th>CreditScore</th>\n      <th>Geography</th>\n      <th>Gender</th>\n      <th>Age</th>\n      <th>Tenure</th>\n      <th>Balance</th>\n      <th>NumOfProducts</th>\n      <th>...</th>\n      <th>EstimatedSalary</th>\n      <th>Exited</th>\n      <th>AgeGroup</th>\n      <th>Geography_Id</th>\n      <th>GenderId</th>\n      <th>18-25</th>\n      <th>26-40</th>\n      <th>41-55</th>\n      <th>56-70</th>\n      <th>70+</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>15634602</td>\n      <td>Hargrave</td>\n      <td>619</td>\n      <td>France</td>\n      <td>Female</td>\n      <td>42</td>\n      <td>2</td>\n      <td>0.00</td>\n      <td>1</td>\n      <td>...</td>\n      <td>101348.88</td>\n      <td>1</td>\n      <td>41-55</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>15647311</td>\n      <td>Hill</td>\n      <td>608</td>\n      <td>Spain</td>\n      <td>Female</td>\n      <td>41</td>\n      <td>1</td>\n      <td>83807.86</td>\n      <td>1</td>\n      <td>...</td>\n      <td>112542.58</td>\n      <td>0</td>\n      <td>41-55</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>15619304</td>\n      <td>Onio</td>\n      <td>502</td>\n      <td>France</td>\n      <td>Female</td>\n      <td>42</td>\n      <td>8</td>\n      <td>159660.80</td>\n      <td>3</td>\n      <td>...</td>\n      <td>113931.57</td>\n      <td>1</td>\n      <td>41-55</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>15701354</td>\n      <td>Boni</td>\n      <td>699</td>\n      <td>France</td>\n      <td>Female</td>\n      <td>39</td>\n      <td>1</td>\n      <td>0.00</td>\n      <td>2</td>\n      <td>...</td>\n      <td>93826.63</td>\n      <td>0</td>\n      <td>26-40</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>15737888</td>\n      <td>Mitchell</td>\n      <td>850</td>\n      <td>Spain</td>\n      <td>Female</td>\n      <td>43</td>\n      <td>2</td>\n      <td>125510.82</td>\n      <td>1</td>\n      <td>...</td>\n      <td>79084.10</td>\n      <td>0</td>\n      <td>41-55</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 22 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"scaler = preprocessing.StandardScaler()\ndata_norm = data.copy()\nnumerical_cols = ['CreditScore', 'Geography_Id', 'GenderId',\"Age\", 'Tenure', 'Balance', 'NumOfProducts', 'HasCrCard', 'IsActiveMember', 'EstimatedSalary']\nfor cols in numerical_cols: \n    data_norm[cols] = scaler.fit_transform(np.array(data_norm[cols]).reshape(-1, 1))\n#Normalisation of my values\nto_explain = data_norm[\"Exited\"]\ndata_norm = data_norm.drop(['RowNumber', 'CustomerId', 'Exited', 'Gender', 'Geography', 'Surname','AgeGroup', '18-25', '26-40','41-55','56-70','70+'], axis = 1)\ndata_norm.head()\n#We don't need our age group anymore, and calcul will be faster","metadata":{"execution":{"iopub.status.busy":"2024-04-26T12:15:05.121582Z","iopub.execute_input":"2024-04-26T12:15:05.122493Z","iopub.status.idle":"2024-04-26T12:15:05.157047Z","shell.execute_reply.started":"2024-04-26T12:15:05.122451Z","shell.execute_reply":"2024-04-26T12:15:05.155916Z"},"trusted":true},"execution_count":11,"outputs":[{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"   CreditScore       Age    Tenure   Balance  NumOfProducts  HasCrCard  \\\n0    -0.326221  0.293517 -1.041760 -1.225848      -0.911583   0.646092   \n1    -0.440036  0.198164 -1.387538  0.117350      -0.911583  -1.547768   \n2    -1.536794  0.293517  1.032908  1.333053       2.527057   0.646092   \n3     0.501521  0.007457 -1.387538 -1.225848       0.807737  -1.547768   \n4     2.063884  0.388871 -1.041760  0.785728      -0.911583   0.646092   \n\n   IsActiveMember  EstimatedSalary  Geography_Id  GenderId  \n0        0.970243         0.021886     -0.901886 -1.095988  \n1        0.970243         0.216534      1.515067 -1.095988  \n2       -1.030670         0.240687     -0.901886 -1.095988  \n3       -1.030670        -0.108918     -0.901886 -1.095988  \n4        0.970243        -0.365276      1.515067 -1.095988  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>CreditScore</th>\n      <th>Age</th>\n      <th>Tenure</th>\n      <th>Balance</th>\n      <th>NumOfProducts</th>\n      <th>HasCrCard</th>\n      <th>IsActiveMember</th>\n      <th>EstimatedSalary</th>\n      <th>Geography_Id</th>\n      <th>GenderId</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>-0.326221</td>\n      <td>0.293517</td>\n      <td>-1.041760</td>\n      <td>-1.225848</td>\n      <td>-0.911583</td>\n      <td>0.646092</td>\n      <td>0.970243</td>\n      <td>0.021886</td>\n      <td>-0.901886</td>\n      <td>-1.095988</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>-0.440036</td>\n      <td>0.198164</td>\n      <td>-1.387538</td>\n      <td>0.117350</td>\n      <td>-0.911583</td>\n      <td>-1.547768</td>\n      <td>0.970243</td>\n      <td>0.216534</td>\n      <td>1.515067</td>\n      <td>-1.095988</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>-1.536794</td>\n      <td>0.293517</td>\n      <td>1.032908</td>\n      <td>1.333053</td>\n      <td>2.527057</td>\n      <td>0.646092</td>\n      <td>-1.030670</td>\n      <td>0.240687</td>\n      <td>-0.901886</td>\n      <td>-1.095988</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0.501521</td>\n      <td>0.007457</td>\n      <td>-1.387538</td>\n      <td>-1.225848</td>\n      <td>0.807737</td>\n      <td>-1.547768</td>\n      <td>-1.030670</td>\n      <td>-0.108918</td>\n      <td>-0.901886</td>\n      <td>-1.095988</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2.063884</td>\n      <td>0.388871</td>\n      <td>-1.041760</td>\n      <td>0.785728</td>\n      <td>-0.911583</td>\n      <td>0.646092</td>\n      <td>0.970243</td>\n      <td>-0.365276</td>\n      <td>1.515067</td>\n      <td>-1.095988</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"X = data[['CreditScore', 'Geography_Id', 'GenderId',\"Age\", 'Tenure', 'Balance', 'NumOfProducts', 'HasCrCard', 'IsActiveMember', 'EstimatedSalary']]\ny = data['Exited']\n\nrf = RandomForestClassifier(n_estimators=100, random_state=42)\nrf.fit(X, y)\n\nfeature_importances = rf.feature_importances_\n\n\nfeature_importances_df = pd.DataFrame({'Feature': X.columns, 'Importance': feature_importances})\n\nfeature_importances_df = feature_importances_df.sort_values('Importance', ascending=False)\n\nprint(feature_importances_df)\n\n","metadata":{"execution":{"iopub.status.busy":"2024-04-26T12:15:05.158593Z","iopub.execute_input":"2024-04-26T12:15:05.159263Z","iopub.status.idle":"2024-04-26T12:15:06.890797Z","shell.execute_reply.started":"2024-04-26T12:15:05.159223Z","shell.execute_reply":"2024-04-26T12:15:06.889666Z"},"trusted":true},"execution_count":12,"outputs":[{"name":"stdout","text":"           Feature  Importance\n3              Age    0.240168\n9  EstimatedSalary    0.148584\n0      CreditScore    0.144056\n5          Balance    0.141131\n6    NumOfProducts    0.130736\n4           Tenure    0.081658\n8   IsActiveMember    0.039419\n1     Geography_Id    0.037012\n7        HasCrCard    0.018837\n2         GenderId    0.018400\n","output_type":"stream"}]},{"cell_type":"markdown","source":"We confirm that Age is the primary factor for Churn Customers for this model","metadata":{}},{"cell_type":"code","source":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\nrf = RandomForestClassifier(n_estimators=100, random_state=42)\n\nrf.fit(X_train, y_train)\n\ny_pred = rf.predict(X_test)\n\nprint(\"Confusion Matrix:\")\nprint(confusion_matrix(y_test, y_pred))\nprint(\"\\nClassification Report:\")\nprint(classification_report(y_test, y_pred))\n#Classic Random Forest Classifier","metadata":{"execution":{"iopub.status.busy":"2024-04-26T12:15:06.892845Z","iopub.execute_input":"2024-04-26T12:15:06.893396Z","iopub.status.idle":"2024-04-26T12:15:08.121529Z","shell.execute_reply.started":"2024-04-26T12:15:06.893357Z","shell.execute_reply":"2024-04-26T12:15:08.120467Z"},"trusted":true},"execution_count":13,"outputs":[{"name":"stdout","text":"Confusion Matrix:\n[[2339   77]\n [ 318  266]]\n\nClassification Report:\n              precision    recall  f1-score   support\n\n           0       0.88      0.97      0.92      2416\n           1       0.78      0.46      0.57       584\n\n    accuracy                           0.87      3000\n   macro avg       0.83      0.71      0.75      3000\nweighted avg       0.86      0.87      0.85      3000\n\n","output_type":"stream"}]},{"cell_type":"markdown","source":"We can see that we have a good precision score for customer that don't leave.\nBut for churn customer, we don't have good metrics, specially for recall, witch means that the model miss a lot of churn customers.\n\nLet's try others models","metadata":{}},{"cell_type":"code","source":"X = data_norm[numerical_cols]\ny = to_explain\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\nknc = KNeighborsClassifier(n_neighbors=4)\n\nknc.fit(X_train, y_train)\n\ny_pred = knc.predict(X_test)\n\nprint(\"Confusion Matrix:\")\nprint(confusion_matrix(y_test, y_pred))\nprint(\"\\nClassification Report:\")\nprint(classification_report(y_test, y_pred))\n#NeighborsClassifier","metadata":{"execution":{"iopub.status.busy":"2024-04-26T12:15:08.123094Z","iopub.execute_input":"2024-04-26T12:15:08.123655Z","iopub.status.idle":"2024-04-26T12:15:08.459528Z","shell.execute_reply.started":"2024-04-26T12:15:08.123598Z","shell.execute_reply":"2024-04-26T12:15:08.458716Z"},"trusted":true},"execution_count":14,"outputs":[{"name":"stdout","text":"Confusion Matrix:\n[[2348   68]\n [ 419  165]]\n\nClassification Report:\n              precision    recall  f1-score   support\n\n           0       0.85      0.97      0.91      2416\n           1       0.71      0.28      0.40       584\n\n    accuracy                           0.84      3000\n   macro avg       0.78      0.63      0.65      3000\nweighted avg       0.82      0.84      0.81      3000\n\n","output_type":"stream"}]},{"cell_type":"markdown","source":"This model is worse than the previous, and have lot of trouble to predict customer that leave","metadata":{}},{"cell_type":"code","source":"X = data_norm[numerical_cols]\ny = to_explain\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\nneural = MLPClassifier(max_iter=5000)\nneural.fit(X_train, y_train)\n\ny_pred = neural.predict(X_test)\n\nprint(\"Confusion Matrix:\")\nprint(confusion_matrix(y_test, y_pred))\nprint(\"\\nClassification Report:\")\nprint(classification_report(y_test, y_pred))\n#NeuralNetworks","metadata":{"execution":{"iopub.status.busy":"2024-04-26T12:15:08.460782Z","iopub.execute_input":"2024-04-26T12:15:08.461311Z","iopub.status.idle":"2024-04-26T12:15:24.858279Z","shell.execute_reply.started":"2024-04-26T12:15:08.461281Z","shell.execute_reply":"2024-04-26T12:15:24.857077Z"},"trusted":true},"execution_count":15,"outputs":[{"name":"stdout","text":"Confusion Matrix:\n[[2277  139]\n [ 289  295]]\n\nClassification Report:\n              precision    recall  f1-score   support\n\n           0       0.89      0.94      0.91      2416\n           1       0.68      0.51      0.58       584\n\n    accuracy                           0.86      3000\n   macro avg       0.78      0.72      0.75      3000\nweighted avg       0.85      0.86      0.85      3000\n\n","output_type":"stream"}]},{"cell_type":"markdown","source":"RandomForest still better","metadata":{}},{"cell_type":"code","source":"X = data_norm[numerical_cols]\ny = to_explain\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\nknn = KNeighborsClassifier(n_neighbors=5)\nknn.fit(X_train, y_train)\n\ny_pred = knn.predict(X_test)\n\nprint(\"Confusion Matrix:\")\nprint(confusion_matrix(y_test, y_pred))\nprint(\"\\nClassification Report:\")\nprint(classification_report(y_test, y_pred))","metadata":{"execution":{"iopub.status.busy":"2024-04-26T12:15:24.860107Z","iopub.execute_input":"2024-04-26T12:15:24.860892Z","iopub.status.idle":"2024-04-26T12:15:25.251209Z","shell.execute_reply.started":"2024-04-26T12:15:24.860847Z","shell.execute_reply":"2024-04-26T12:15:25.250002Z"},"trusted":true},"execution_count":16,"outputs":[{"name":"stdout","text":"Confusion Matrix:\n[[2298  118]\n [ 369  215]]\n\nClassification Report:\n              precision    recall  f1-score   support\n\n           0       0.86      0.95      0.90      2416\n           1       0.65      0.37      0.47       584\n\n    accuracy                           0.84      3000\n   macro avg       0.75      0.66      0.69      3000\nweighted avg       0.82      0.84      0.82      3000\n\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Conclusion","metadata":{}},{"cell_type":"markdown","source":"The best model seems to be the RandomForestClassifier.\nYet, it have low performance on the prediction for customer who quit.\nWe could improve this by adding more data to our dataset.\nWe have only 10k rows, and churn customers represents only 20% of this. \nAnd when we used train/test split it 30% of this data. So the model is lacking of information.","metadata":{}}]}